@page "/"
@using KristofferStrube.Blazor.WebIDL.Exceptions;
@implements IAsyncDisposable
@inject IMediaDevicesService MediaDevicesService

<PageTitle>Media Capture and Streams - Load Tracks</PageTitle>

<h2>Load Tracks</h2>

<p>On this page we try to load two media tracks that match some constraints.</p>

@if (error is { } errorMessage)
{
    <p style="color: red;">@errorMessage</p>
}
else if (mediaStream is null)
{
    <button class="btn btn-primary" @onclick="LoadMediaStream">Load MediaStream</button>
}
else
{
    <h3>MediaStream</h3>
    <p>
        Active: <span class="badge @(active ? "bg-success" : "bg-danger")">@active</span><br />
        Id: <u>@id</u>
    </p>
}
@if (tracks is { Length: > 0 })
{
    <h3>Tracks:</h3>
    @foreach (var trackInfo in tracks)
    {
        var mediaStreamTrack = trackInfo.track;
        <div class="my-3">
            <h4 class="badge @(trackInfo.state is MediaStreamTrackState.Live ? "bg-success" : "bg-warning")"><b>@trackInfo.kind</b>: @trackInfo.label</h4>
            id: <u>@trackInfo.id</u>
            <br />

            <button class="btn bg-warning" @onclick="() => Stop(mediaStreamTrack)">Stop</button>
            <button class="btn bg-danger" @onclick="() => Remove(mediaStreamTrack)">Remove</button>

            <div class="my-1 p-1 border border-secondary rounded">
                <h5>Constraints:</h5>
                @if (trackInfo.constaints?.Width is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            width
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainULongPresenter ConstrainULong="trackInfo.constaints.Width" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.Height is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            height
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainULongPresenter ConstrainULong="trackInfo.constaints.Height" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.AspectRatio is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            aspect ratio
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainDoublePresenter ConstrainDouble="trackInfo.constaints.AspectRatio" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.FrameRate is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            frame rate
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainDoublePresenter ConstrainDouble="trackInfo.constaints.FrameRate" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.FacingMode is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            facing mode
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainVideoFacingModePresenter ConstrainVideoFacingMode="trackInfo.constaints.FacingMode" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.ResizeMode is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            resize mode
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainVideoResizeModePresenter ConstrainVideoResizeMode="trackInfo.constaints.ResizeMode" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.SampleRate is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            sample rate
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainULongPresenter ConstrainULong="trackInfo.constaints.SampleRate" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.SampleSize is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            sample size
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainULongPresenter ConstrainULong="trackInfo.constaints.SampleSize" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.EchoCancellation is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            echo cancellation
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainBooleanPresenter ConstrainBoolean="trackInfo.constaints.EchoCancellation" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.AutoGainControl is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            auto gain control
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainBooleanPresenter ConstrainBoolean="trackInfo.constaints.AutoGainControl" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.NoiseSuppression is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            noise suppression
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainBooleanPresenter ConstrainBoolean="trackInfo.constaints.NoiseSuppression" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.Latency is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            latency
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainDoublePresenter ConstrainDouble="trackInfo.constaints.Latency" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.ChannelCount is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            channel count
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainULongPresenter ConstrainULong="trackInfo.constaints.ChannelCount" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.DeviceId is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            device id
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainStringPresenter ConstrainDomString="trackInfo.constaints.DeviceId" />
                        </div>
                    </div>
                }
                @if (trackInfo.constaints?.GroupId is not null)
                {
                    <hr />
                    <div class="row">
                        <div class="col">
                            group id
                        </div>
                        <div class="col d-flex flex-column">
                            <ConstrainStringPresenter ConstrainDomString="trackInfo.constaints.GroupId" />
                        </div>
                    </div>
                }
            </div>
            <div class="my-1 p-1 border border-secondary rounded">
                <h5>Capabilites:</h5>
                <textarea style="height:20vh; width: 100%;">@System.Text.Json.JsonSerializer.Serialize(trackInfo.capabilities, new System.Text.Json.JsonSerializerOptions() { WriteIndented = true })</textarea>
            </div>
        </div>
    }
}

@code {
    private MediaStream? mediaStream;
    private bool active;
    private string id = string.Empty;
    private (MediaStreamTrackKind kind, string label, string id, MediaStreamTrackState state, MediaTrackCapabilities capabilities, MediaTrackConstraints constaints, MediaStreamTrack track)[]? tracks;
    private string? error;

    async Task LoadMediaStream()
    {
        try
        {
            await using var mediaDevices = await MediaDevicesService.GetMediaDevicesAsync();
            var mediaConstraints = new MediaStreamConstraints()
                {
                    Video = new MediaTrackConstraints()
                    {
                        Advanced = new[]
                                                {
                        new MediaTrackConstraintSet()
                        {
                            AspectRatio = 1.0 / 6
                        }
                    },
                        Width = new ConstrainULongRange()
                        {
                            Min = 100,
                            Max = 2000,
                            Ideal = 1920
                        },
                        Height = 1080,
                        AspectRatio = new ConstrainDoubleRange()
                        {
                            Min = 3.0 / 4.0,
                            Max = 21.0 / 9.0
                        },
                        FrameRate = 30,
                        FacingMode = VideoFacingMode.User,
                        ResizeMode = new ConstrainVideoResizeModeParameters()
                        {
                            Ideal = new[] { VideoResizeMode.CropAndScale, VideoResizeMode.None },
                            Exact = new[] { VideoResizeMode.CropAndScale }
                        },
                        DeviceId = "Some device",
                        GroupId = ""
                    },
                    Audio = new MediaTrackConstraints()
                    {
                        SampleRate = 10,
                        SampleSize = new ConstrainULongRange()
                        {
                            Ideal = 100,
                            Max = 200,
                            Min = 10
                        },
                        EchoCancellation = true,
                        AutoGainControl = new ConstrainBooleanParameters()
                        {
                            Ideal = true,
                            Exact = false
                        },
                        NoiseSuppression = false,
                        Latency = 2.2,
                        ChannelCount = 2,
                    }
                };
            mediaStream = await mediaDevices.GetUserMediaAsync(mediaConstraints);
            id = await mediaStream.GetIdAsync();
            await LoadTracksAsync();
        }
        catch (WebIDLException ex)
        {
            error = $"{ex.GetType().Name}: {ex.Message}";
        }
    }

    async Task LoadTracksAsync()
    {
        if (mediaStream is null) return;
        tracks = await Task.WhenAll(
            (await mediaStream.GetTracksAsync())
                .Select(async track =>
                    (
                        kind: await track.GetKindAsync(),
                        label: await track.GetLabelAsync(),
                        id: await track.GetIdAsync(),
                        state: await track.GetReadyStateAsync(),
                        capabilities: await track.GetCapabilitiesAsync(),
                        constraints: await track.GetConstraintsAsync(),
                        track: track
                    )
                )
        );
        active = await mediaStream.GetActiveAsync();
    }

    async Task Stop(MediaStreamTrack track)
    {
        if (mediaStream is null) return;
        await track.StopAsync();
        await LoadTracksAsync();
    }

    async Task Remove(MediaStreamTrack track)
    {
        if (mediaStream is null) return;
        await mediaStream.RemoveTrackAsync(track);
        await LoadTracksAsync();
    }

    async Task StopVideoTrack()
    {
        if (mediaStream is null) return;
        var videoTrack = (await mediaStream.GetVideoTracksAsync()).FirstOrDefault();
        if (videoTrack is not null)
        {
            await videoTrack.StopAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await StopVideoTrack();
    }
}